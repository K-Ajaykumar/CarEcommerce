{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/orders`;\n  }\n  getUserOrders() {\n    return this.http.get(`${this.apiUrl}/user`).pipe(catchError(error => {\n      console.error('Error fetching user orders:', error);\n      return of([]);\n    }));\n  }\n  getOrderById(orderId) {\n    return this.http.get(`${this.apiUrl}/${orderId}`).pipe(catchError(error => {\n      console.error('Error fetching order:', error);\n      throw error;\n    }));\n  }\n  createOrder(order) {\n    return this.http.post(this.apiUrl, order).pipe(catchError(error => {\n      console.error('Error creating order:', error);\n      throw error;\n    }));\n  }\n  updateOrderStatus(orderId, status) {\n    return this.http.patch(`${this.apiUrl}/${orderId}/status`, {\n      status\n    }).pipe(catchError(error => {\n      console.error('Error updating order status:', error);\n      throw error;\n    }));\n  }\n  cancelOrder(orderId) {\n    return this.updateOrderStatus(orderId, 'cancelled');\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","catchError","environment","OrderService","constructor","http","apiUrl","getUserOrders","get","pipe","error","console","getOrderById","orderId","createOrder","order","post","updateOrderStatus","status","patch","cancelOrder","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Order } from '../models/order.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  private apiUrl = `${environment.apiUrl}/orders`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUserOrders(): Observable<Order[]> {\r\n    return this.http.get<Order[]>(`${this.apiUrl}/user`).pipe(\r\n      catchError(error => {\r\n        console.error('Error fetching user orders:', error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getOrderById(orderId: string): Observable<Order> {\r\n    return this.http.get<Order>(`${this.apiUrl}/${orderId}`).pipe(\r\n      catchError(error => {\r\n        console.error('Error fetching order:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  createOrder(order: Order): Observable<Order> {\r\n    return this.http.post<Order>(this.apiUrl, order).pipe(\r\n      catchError(error => {\r\n        console.error('Error creating order:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  updateOrderStatus(orderId: string, status: Order['status']): Observable<Order> {\r\n    return this.http.patch<Order>(`${this.apiUrl}/${orderId}/status`, { status }).pipe(\r\n      catchError(error => {\r\n        console.error('Error updating order status:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  cancelOrder(orderId: string): Observable<Order> {\r\n    return this.updateOrderStatus(orderId, 'cancelled');\r\n  }\r\n} "],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAa,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,SAAS;EAER;EAEvCC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,GAAG,IAAI,CAACF,MAAM,OAAO,CAAC,CAACG,IAAI,CACvDR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAOV,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACH;EAEAY,YAAYA,CAACC,OAAe;IAC1B,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,IAAIO,OAAO,EAAE,CAAC,CAACJ,IAAI,CAC3DR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAI,WAAWA,CAACC,KAAY;IACtB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAQ,IAAI,CAACV,MAAM,EAAES,KAAK,CAAC,CAACN,IAAI,CACnDR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAO,iBAAiBA,CAACJ,OAAe,EAAEK,MAAuB;IACxD,OAAO,IAAI,CAACb,IAAI,CAACc,KAAK,CAAQ,GAAG,IAAI,CAACb,MAAM,IAAIO,OAAO,SAAS,EAAE;MAAEK;IAAM,CAAE,CAAC,CAACT,IAAI,CAChFR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAU,WAAWA,CAACP,OAAe;IACzB,OAAO,IAAI,CAACI,iBAAiB,CAACJ,OAAO,EAAE,WAAW,CAAC;EACrD;;;uBA3CWV,YAAY,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZrB,YAAY;MAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}