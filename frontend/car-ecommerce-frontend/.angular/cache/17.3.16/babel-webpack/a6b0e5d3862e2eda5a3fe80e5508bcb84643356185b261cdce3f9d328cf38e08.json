{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5083/api/cart';\n    this.cartItemsSubject = new BehaviorSubject([]);\n    this.cartItems$ = this.cartItemsSubject.asObservable();\n    this.cartCountSubject = new BehaviorSubject(0);\n    this.cartCount$ = this.cartCountSubject.asObservable();\n    this.loadCart();\n  }\n  loadCart() {\n    this.http.get(this.apiUrl).subscribe({\n      next: items => {\n        this.cartItemsSubject.next(items);\n        this.updateCartCount();\n      },\n      error: error => console.error('Error loading cart:', error)\n    });\n  }\n  addToCart(carId, quantity = 1) {\n    return this.http.post(this.apiUrl, {\n      carId,\n      quantity\n    });\n  }\n  updateQuantity(cartItemId, quantity) {\n    return this.http.put(`${this.apiUrl}/${cartItemId}`, {\n      quantity\n    });\n  }\n  removeFromCart(carId) {\n    return this.http.delete(`${this.apiUrl}/${carId}`);\n  }\n  clearCart() {\n    return this.http.delete(`${this.apiUrl}/clear`);\n  }\n  updateCartCount() {\n    const totalItems = this.cartItemsSubject.value.reduce((sum, item) => sum + item.quantity, 0);\n    this.cartCountSubject.next(totalItems);\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","CartService","constructor","http","apiUrl","cartItemsSubject","cartItems$","asObservable","cartCountSubject","cartCount$","loadCart","get","subscribe","next","items","updateCartCount","error","console","addToCart","carId","quantity","post","updateQuantity","cartItemId","put","removeFromCart","delete","clearCart","totalItems","value","reduce","sum","item","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface CartItem {\r\n  id: number;\r\n  carId: number;\r\n  carMake: string;\r\n  carModel: string;\r\n  carYear: number;\r\n  carPrice: number;\r\n  quantity: number;\r\n  totalPrice: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private apiUrl = 'http://localhost:5083/api/cart';\r\n  private cartItemsSubject = new BehaviorSubject<CartItem[]>([]);\r\n  cartItems$ = this.cartItemsSubject.asObservable();\r\n  \r\n  private cartCountSubject = new BehaviorSubject<number>(0);\r\n  cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadCart();\r\n  }\r\n\r\n  loadCart(): void {\r\n    this.http.get<CartItem[]>(this.apiUrl).subscribe({\r\n      next: (items) => {\r\n        this.cartItemsSubject.next(items);\r\n        this.updateCartCount();\r\n      },\r\n      error: (error) => console.error('Error loading cart:', error)\r\n    });\r\n  }\r\n\r\n  addToCart(carId: number, quantity: number = 1): Observable<any> {\r\n    return this.http.post(this.apiUrl, { carId, quantity });\r\n  }\r\n\r\n  updateQuantity(cartItemId: number, quantity: number): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/${cartItemId}`, { quantity });\r\n  }\r\n\r\n  removeFromCart(carId: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${carId}`);\r\n  }\r\n\r\n  clearCart(): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/clear`);\r\n  }\r\n\r\n  private updateCartCount(): void {\r\n    const totalItems = this.cartItemsSubject.value.reduce(\r\n      (sum, item) => sum + item.quantity, 0\r\n    );\r\n    this.cartCountSubject.next(totalItems);\r\n  }\r\n} "],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;AAiBlD,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPhB,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,gBAAgB,GAAG,IAAIL,eAAe,CAAa,EAAE,CAAC;IAC9D,KAAAM,UAAU,GAAG,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;IAEzC,KAAAC,gBAAgB,GAAG,IAAIR,eAAe,CAAS,CAAC,CAAC;IACzD,KAAAS,UAAU,GAAG,IAAI,CAACD,gBAAgB,CAACD,YAAY,EAAE;IAG/C,IAAI,CAACG,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAa,IAAI,CAACP,MAAM,CAAC,CAACQ,SAAS,CAAC;MAC/CC,IAAI,EAAGC,KAAK,IAAI;QACd,IAAI,CAACT,gBAAgB,CAACQ,IAAI,CAACC,KAAK,CAAC;QACjC,IAAI,CAACC,eAAe,EAAE;MACxB,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK;KAC7D,CAAC;EACJ;EAEAE,SAASA,CAACC,KAAa,EAAEC,QAAA,GAAmB,CAAC;IAC3C,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAC,IAAI,CAACjB,MAAM,EAAE;MAAEe,KAAK;MAAEC;IAAQ,CAAE,CAAC;EACzD;EAEAE,cAAcA,CAACC,UAAkB,EAAEH,QAAgB;IACjD,OAAO,IAAI,CAACjB,IAAI,CAACqB,GAAG,CAAC,GAAG,IAAI,CAACpB,MAAM,IAAImB,UAAU,EAAE,EAAE;MAAEH;IAAQ,CAAE,CAAC;EACpE;EAEAK,cAAcA,CAACN,KAAa;IAC1B,OAAO,IAAI,CAAChB,IAAI,CAACuB,MAAM,CAAC,GAAG,IAAI,CAACtB,MAAM,IAAIe,KAAK,EAAE,CAAC;EACpD;EAEAQ,SAASA,CAAA;IACP,OAAO,IAAI,CAACxB,IAAI,CAACuB,MAAM,CAAC,GAAG,IAAI,CAACtB,MAAM,QAAQ,CAAC;EACjD;EAEQW,eAAeA,CAAA;IACrB,MAAMa,UAAU,GAAG,IAAI,CAACvB,gBAAgB,CAACwB,KAAK,CAACC,MAAM,CACnD,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACZ,QAAQ,EAAE,CAAC,CACtC;IACD,IAAI,CAACZ,gBAAgB,CAACK,IAAI,CAACe,UAAU,CAAC;EACxC;;;uBA3CW3B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXnC,WAAW;MAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}