{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CarService {\n  constructor() {\n    this.mockCars = [{\n      id: 1,\n      brand: 'Ford',\n      model: 'Mustang Mach-E',\n      year: 2023,\n      price: 45000,\n      imageUrl: 'assets/cars/ford-mustang-mach-e.jpg',\n      description: 'All-electric SUV with the soul of a Mustang',\n      features: ['Electric Powertrain', 'Advanced Driver Assistance', 'Premium Sound System'],\n      mileage: 0,\n      fuelType: 'Electric',\n      transmission: 'Automatic',\n      color: 'Rapid Red'\n    }, {\n      id: 2,\n      brand: 'Tesla',\n      model: 'Model 3',\n      year: 2023,\n      price: 42000,\n      imageUrl: 'assets/cars/tesla-model-3.jpg',\n      description: 'High-performance electric sedan',\n      features: ['Autopilot', 'Long Range Battery', 'Premium Interior'],\n      mileage: 0,\n      fuelType: 'Electric',\n      transmission: 'Automatic',\n      color: 'Pearl White'\n    }, {\n      id: 3,\n      brand: 'BMW',\n      model: 'X5',\n      year: 2023,\n      price: 65000,\n      imageUrl: 'assets/cars/bmw-x5.jpg',\n      description: 'Luxury SUV with powerful performance',\n      features: ['All-Wheel Drive', 'Leather Interior', 'Panoramic Sunroof'],\n      mileage: 0,\n      fuelType: 'Gasoline',\n      transmission: 'Automatic',\n      color: 'Alpine White'\n    }];\n  }\n  getCars() {\n    return of(this.mockCars);\n  }\n  getCarById(id) {\n    const car = this.mockCars.find(car => car.id === id);\n    return of(car);\n  }\n  static {\n    this.ɵfac = function CarService_Factory(t) {\n      return new (t || CarService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CarService,\n      factory: CarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","CarService","constructor","mockCars","id","brand","model","year","price","imageUrl","description","features","mileage","fuelType","transmission","color","getCars","getCarById","car","find","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\car.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Car } from '../models/car.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarService {\r\n  private mockCars: Car[] = [\r\n    {\r\n      id: 1,\r\n      brand: 'Ford',\r\n      model: 'Mustang Mach-E',\r\n      year: 2023,\r\n      price: 45000,\r\n      imageUrl: 'assets/cars/ford-mustang-mach-e.jpg',\r\n      description: 'All-electric SUV with the soul of a Mustang',\r\n      features: ['Electric Powertrain', 'Advanced Driver Assistance', 'Premium Sound System'],\r\n      mileage: 0,\r\n      fuelType: 'Electric',\r\n      transmission: 'Automatic',\r\n      color: 'Rapid Red'\r\n    },\r\n    {\r\n      id: 2,\r\n      brand: 'Tesla',\r\n      model: 'Model 3',\r\n      year: 2023,\r\n      price: 42000,\r\n      imageUrl: 'assets/cars/tesla-model-3.jpg',\r\n      description: 'High-performance electric sedan',\r\n      features: ['Autopilot', 'Long Range Battery', 'Premium Interior'],\r\n      mileage: 0,\r\n      fuelType: 'Electric',\r\n      transmission: 'Automatic',\r\n      color: 'Pearl White'\r\n    },\r\n    {\r\n      id: 3,\r\n      brand: 'BMW',\r\n      model: 'X5',\r\n      year: 2023,\r\n      price: 65000,\r\n      imageUrl: 'assets/cars/bmw-x5.jpg',\r\n      description: 'Luxury SUV with powerful performance',\r\n      features: ['All-Wheel Drive', 'Leather Interior', 'Panoramic Sunroof'],\r\n      mileage: 0,\r\n      fuelType: 'Gasoline',\r\n      transmission: 'Automatic',\r\n      color: 'Alpine White'\r\n    }\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  getCars(): Observable<Car[]> {\r\n    return of(this.mockCars);\r\n  }\r\n\r\n  getCarById(id: number): Observable<Car | undefined> {\r\n    const car = this.mockCars.find(car => car.id === id);\r\n    return of(car);\r\n  }\r\n}"],"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;;AAMrC,OAAM,MAAOC,UAAU;EA8CrBC,YAAA;IA7CQ,KAAAC,QAAQ,GAAU,CACxB;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,MAAM;MACbC,KAAK,EAAE,gBAAgB;MACvBC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAE,qCAAqC;MAC/CC,WAAW,EAAE,6CAA6C;MAC1DC,QAAQ,EAAE,CAAC,qBAAqB,EAAE,4BAA4B,EAAE,sBAAsB,CAAC;MACvFC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,UAAU;MACpBC,YAAY,EAAE,WAAW;MACzBC,KAAK,EAAE;KACR,EACD;MACEX,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE,SAAS;MAChBC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAE,+BAA+B;MACzCC,WAAW,EAAE,iCAAiC;MAC9CC,QAAQ,EAAE,CAAC,WAAW,EAAE,oBAAoB,EAAE,kBAAkB,CAAC;MACjEC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,UAAU;MACpBC,YAAY,EAAE,WAAW;MACzBC,KAAK,EAAE;KACR,EACD;MACEX,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAE,wBAAwB;MAClCC,WAAW,EAAE,sCAAsC;MACnDC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC;MACtEC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,UAAU;MACpBC,YAAY,EAAE,WAAW;MACzBC,KAAK,EAAE;KACR,CACF;EAEe;EAEhBC,OAAOA,CAAA;IACL,OAAOhB,EAAE,CAAC,IAAI,CAACG,QAAQ,CAAC;EAC1B;EAEAc,UAAUA,CAACb,EAAU;IACnB,MAAMc,GAAG,GAAG,IAAI,CAACf,QAAQ,CAACgB,IAAI,CAACD,GAAG,IAAIA,GAAG,CAACd,EAAE,KAAKA,EAAE,CAAC;IACpD,OAAOJ,EAAE,CAACkB,GAAG,CAAC;EAChB;;;uBAvDWjB,UAAU;IAAA;EAAA;;;aAAVA,UAAU;MAAAmB,OAAA,EAAVnB,UAAU,CAAAoB,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}