{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class OrderService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = `${environment.apiUrl}/orders`;\n  }\n  createOrder(orderData) {\n    return this.http.post(this.apiUrl, orderData).pipe(catchError(error => {\n      console.error('Error creating order:', error);\n      throw error;\n    }));\n  }\n  getUserOrders() {\n    return this.http.get(`${this.apiUrl}/user`).pipe(catchError(error => {\n      console.error('Error fetching user orders:', error);\n      throw error;\n    }));\n  }\n  getOrderById(orderId) {\n    return this.http.get(`${this.apiUrl}/${orderId}`).pipe(catchError(error => {\n      console.error(`Error fetching order ${orderId}:`, error);\n      throw error;\n    }));\n  }\n  updateOrderStatus(orderId, status) {\n    return this.http.patch(`${this.apiUrl}/${orderId}/status`, {\n      status\n    }).pipe(catchError(error => {\n      console.error(`Error updating order ${orderId} status:`, error);\n      throw error;\n    }));\n  }\n  cancelOrder(orderId) {\n    return this.updateOrderStatus(orderId, 'cancelled');\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","environment","OrderService","constructor","http","authService","apiUrl","createOrder","orderData","post","pipe","error","console","getUserOrders","get","getOrderById","orderId","updateOrderStatus","status","patch","cancelOrder","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Order } from '../models/order.model';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  private apiUrl = `${environment.apiUrl}/orders`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  createOrder(orderData: Partial<Order>): Observable<Order> {\r\n    return this.http.post<Order>(this.apiUrl, orderData).pipe(\r\n      catchError(error => {\r\n        console.error('Error creating order:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  getUserOrders(): Observable<Order[]> {\r\n    return this.http.get<Order[]>(`${this.apiUrl}/user`).pipe(\r\n      catchError(error => {\r\n        console.error('Error fetching user orders:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  getOrderById(orderId: string): Observable<Order> {\r\n    return this.http.get<Order>(`${this.apiUrl}/${orderId}`).pipe(\r\n      catchError(error => {\r\n        console.error(`Error fetching order ${orderId}:`, error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  updateOrderStatus(orderId: string, status: Order['status']): Observable<Order> {\r\n    return this.http.patch<Order>(`${this.apiUrl}/${orderId}/status`, { status }).pipe(\r\n      catchError(error => {\r\n        console.error(`Error updating order ${orderId} status:`, error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  cancelOrder(orderId: string): Observable<Order> {\r\n    return this.updateOrderStatus(orderId, 'cancelled');\r\n  }\r\n} "],"mappings":"AAGA,SAASA,UAAU,QAAa,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,gCAAgC;;;;AAM5D,OAAM,MAAOC,YAAY;EAGvBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAJb,KAAAC,MAAM,GAAG,GAAGL,WAAW,CAACK,MAAM,SAAS;EAK5C;EAEHC,WAAWA,CAACC,SAAyB;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAQ,IAAI,CAACH,MAAM,EAAEE,SAAS,CAAC,CAACE,IAAI,CACvDV,UAAU,CAACW,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAE,aAAaA,CAAA;IACX,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAU,GAAG,IAAI,CAACR,MAAM,OAAO,CAAC,CAACI,IAAI,CACvDV,UAAU,CAACW,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAI,YAAYA,CAACC,OAAe;IAC1B,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAQ,GAAG,IAAI,CAACR,MAAM,IAAIU,OAAO,EAAE,CAAC,CAACN,IAAI,CAC3DV,UAAU,CAACW,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,wBAAwBK,OAAO,GAAG,EAAEL,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAM,iBAAiBA,CAACD,OAAe,EAAEE,MAAuB;IACxD,OAAO,IAAI,CAACd,IAAI,CAACe,KAAK,CAAQ,GAAG,IAAI,CAACb,MAAM,IAAIU,OAAO,SAAS,EAAE;MAAEE;IAAM,CAAE,CAAC,CAACR,IAAI,CAChFV,UAAU,CAACW,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,wBAAwBK,OAAO,UAAU,EAAEL,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAS,WAAWA,CAACJ,OAAe;IACzB,OAAO,IAAI,CAACC,iBAAiB,CAACD,OAAO,EAAE,WAAW,CAAC;EACrD;;;uBA9CWd,YAAY,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAZxB,YAAY;MAAAyB,OAAA,EAAZzB,YAAY,CAAA0B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}