{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class CartService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:5083/api/cart';\n    this.cartItemsSubject = new BehaviorSubject([]);\n    this.cartItems$ = this.cartItemsSubject.asObservable();\n    this.loadCartItems();\n  }\n  getHeaders() {\n    const token = this.authService.getToken();\n    return {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Server-side error\n      switch (error.status) {\n        case 401:\n          errorMessage = 'Please login to access cart';\n          break;\n        case 404:\n          // For 404 errors, we'll handle them silently for remove operations\n          if (error.url?.includes('delete')) {\n            return throwError(() => ({\n              silent: true\n            }));\n          }\n          errorMessage = 'Item not found';\n          break;\n        case 400:\n          errorMessage = error.error?.message || 'Invalid request';\n          break;\n        default:\n          errorMessage = `Error: ${error.status} - ${error.error?.message || 'Unknown error'}`;\n      }\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  mapCartItemDTOToCartItem(dto) {\n    return {\n      id: dto.id,\n      carId: dto.carId,\n      make: dto.carMake,\n      model: dto.carModel,\n      year: dto.carYear,\n      price: dto.carPrice,\n      quantity: dto.quantity,\n      totalPrice: dto.totalPrice,\n      createdAt: new Date(dto.createdAt),\n      updatedAt: dto.updatedAt ? new Date(dto.updatedAt) : undefined\n    };\n  }\n  loadCartItems() {\n    this.http.get(this.apiUrl, this.getHeaders()).pipe(map(items => items.map(item => this.mapCartItemDTOToCartItem(item))), catchError(this.handleError)).subscribe({\n      next: items => this.cartItemsSubject.next(items),\n      error: error => {\n        console.error('Error loading cart items:', error);\n        this.cartItemsSubject.next([]);\n      }\n    });\n  }\n  addToCart(carId, quantity = 1) {\n    return this.http.post(this.apiUrl, {\n      carId,\n      quantity\n    }, this.getHeaders()).pipe(tap(() => this.loadCartItems()), catchError(this.handleError));\n  }\n  updateCartItem(itemId, quantity) {\n    if (quantity <= 0) {\n      return this.removeFromCart(itemId);\n    }\n    return this.http.put(`${this.apiUrl}/${itemId}`, {\n      quantity\n    }, this.getHeaders()).pipe(tap(() => this.loadCartItems()), catchError(this.handleError));\n  }\n  removeFromCart(itemId) {\n    // Optimistically remove the item from the local state\n    const currentItems = this.cartItemsSubject.value;\n    const itemToRemove = currentItems.find(item => item.id === itemId);\n    if (!itemToRemove) {\n      return throwError(() => new Error('Item not found'));\n    }\n    const updatedItems = currentItems.filter(item => item.id !== itemId);\n    this.cartItemsSubject.next(updatedItems);\n    return this.http.delete(`${this.apiUrl}/${itemToRemove.carId}`,\n    // Use carId instead of id\n    this.getHeaders()).pipe(catchError(error => {\n      // If there's an error, revert the optimistic update\n      if (!error.silent) {\n        this.cartItemsSubject.next(currentItems);\n      }\n      return this.handleError(error);\n    }));\n  }\n  clearCart() {\n    return this.http.delete(`${this.apiUrl}/clear`, this.getHeaders()).pipe(tap(() => this.cartItemsSubject.next([])), catchError(this.handleError));\n  }\n  getCartTotal() {\n    return this.cartItems$.pipe(map(items => items.reduce((total, item) => total + item.totalPrice, 0)));\n  }\n  getCartItemCount() {\n    return this.cartItems$.pipe(map(items => items.reduce((count, item) => count + item.quantity, 0)));\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","throwError","map","tap","catchError","CartService","constructor","http","authService","apiUrl","cartItemsSubject","cartItems$","asObservable","loadCartItems","getHeaders","token","getToken","headers","handleError","error","errorMessage","ErrorEvent","message","status","url","includes","silent","Error","mapCartItemDTOToCartItem","dto","id","carId","make","carMake","model","carModel","year","carYear","price","carPrice","quantity","totalPrice","createdAt","Date","updatedAt","undefined","get","pipe","items","item","subscribe","next","console","addToCart","post","updateCartItem","itemId","removeFromCart","put","currentItems","value","itemToRemove","find","updatedItems","filter","delete","clearCart","getCartTotal","reduce","total","getCartItemCount","count","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { map, tap, catchError } from 'rxjs/operators';\r\nimport { CartItem } from '../models/cart-item.model';\r\nimport { AuthService } from './auth.service';\r\n\r\ninterface CartItemDTO {\r\n  id: number;\r\n  carId: number;\r\n  carMake: string;\r\n  carModel: string;\r\n  carYear: number;\r\n  carPrice: number;\r\n  quantity: number;\r\n  totalPrice: number;\r\n  createdAt: string;\r\n  updatedAt: string | null;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private apiUrl = 'http://localhost:5083/api/cart';\r\n  private cartItemsSubject = new BehaviorSubject<CartItem[]>([]);\r\n  cartItems$ = this.cartItemsSubject.asObservable();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {\r\n    this.loadCartItems();\r\n  }\r\n\r\n  private getHeaders(): { headers: HttpHeaders } {\r\n    const token = this.authService.getToken();\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      })\r\n    };\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An error occurred';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Server-side error\r\n      switch (error.status) {\r\n        case 401:\r\n          errorMessage = 'Please login to access cart';\r\n          break;\r\n        case 404:\r\n          // For 404 errors, we'll handle them silently for remove operations\r\n          if (error.url?.includes('delete')) {\r\n            return throwError(() => ({ silent: true }));\r\n          }\r\n          errorMessage = 'Item not found';\r\n          break;\r\n        case 400:\r\n          errorMessage = error.error?.message || 'Invalid request';\r\n          break;\r\n        default:\r\n          errorMessage = `Error: ${error.status} - ${error.error?.message || 'Unknown error'}`;\r\n      }\r\n    }\r\n    \r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  private mapCartItemDTOToCartItem(dto: CartItemDTO): CartItem {\r\n    return {\r\n      id: dto.id,\r\n      carId: dto.carId,\r\n      make: dto.carMake,\r\n      model: dto.carModel,\r\n      year: dto.carYear,\r\n      price: dto.carPrice,\r\n      quantity: dto.quantity,\r\n      totalPrice: dto.totalPrice,\r\n      createdAt: new Date(dto.createdAt),\r\n      updatedAt: dto.updatedAt ? new Date(dto.updatedAt) : undefined\r\n    };\r\n  }\r\n\r\n  loadCartItems(): void {\r\n    this.http.get<CartItemDTO[]>(this.apiUrl, this.getHeaders())\r\n      .pipe(\r\n        map(items => items.map(item => this.mapCartItemDTOToCartItem(item))),\r\n        catchError(this.handleError)\r\n      )\r\n      .subscribe({\r\n        next: (items) => this.cartItemsSubject.next(items),\r\n        error: (error) => {\r\n          console.error('Error loading cart items:', error);\r\n          this.cartItemsSubject.next([]);\r\n        }\r\n      });\r\n  }\r\n\r\n  addToCart(carId: number, quantity: number = 1): Observable<void> {\r\n    return this.http.post<void>(\r\n      this.apiUrl,\r\n      { carId, quantity },\r\n      this.getHeaders()\r\n    ).pipe(\r\n      tap(() => this.loadCartItems()),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  updateCartItem(itemId: number, quantity: number): Observable<void> {\r\n    if (quantity <= 0) {\r\n      return this.removeFromCart(itemId);\r\n    }\r\n\r\n    return this.http.put<void>(\r\n      `${this.apiUrl}/${itemId}`,\r\n      { quantity },\r\n      this.getHeaders()\r\n    ).pipe(\r\n      tap(() => this.loadCartItems()),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  removeFromCart(itemId: number): Observable<void> {\r\n    // Optimistically remove the item from the local state\r\n    const currentItems = this.cartItemsSubject.value;\r\n    const itemToRemove = currentItems.find(item => item.id === itemId);\r\n    \r\n    if (!itemToRemove) {\r\n      return throwError(() => new Error('Item not found'));\r\n    }\r\n\r\n    const updatedItems = currentItems.filter(item => item.id !== itemId);\r\n    this.cartItemsSubject.next(updatedItems);\r\n\r\n    return this.http.delete<void>(\r\n      `${this.apiUrl}/${itemToRemove.carId}`, // Use carId instead of id\r\n      this.getHeaders()\r\n    ).pipe(\r\n      catchError((error) => {\r\n        // If there's an error, revert the optimistic update\r\n        if (!error.silent) {\r\n          this.cartItemsSubject.next(currentItems);\r\n        }\r\n        return this.handleError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  clearCart(): Observable<void> {\r\n    return this.http.delete<void>(\r\n      `${this.apiUrl}/clear`,\r\n      this.getHeaders()\r\n    ).pipe(\r\n      tap(() => this.cartItemsSubject.next([])),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getCartTotal(): Observable<number> {\r\n    return this.cartItems$.pipe(\r\n      map(items => items.reduce((total, item) => total + item.totalPrice, 0))\r\n    );\r\n  }\r\n\r\n  getCartItemCount(): Observable<number> {\r\n    return this.cartItems$.pipe(\r\n      map(items => items.reduce((count, item) => count + item.quantity, 0))\r\n    );\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}