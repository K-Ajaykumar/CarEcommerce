{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CarService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/api/cars`;\n  }\n  getHttpOptions() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getImageUrl(car) {\n    // Exact mapping based on the database records and asset files\n    const imageMap = {\n      'Toyota_Camry': 'Toyota Camry.jpg',\n      'Honda_CR-V': 'CR-V.jpg',\n      'Tesla_Model 3': 'tesla-model-3.jpg',\n      'BMW_X5': 'BMW X5.jpeg',\n      'Ford_F-150': 'F-150.jpeg',\n      'Ford_Mustang Mach-E': 'ford-mustang-mach-e.jpg',\n      'Audi_A4': 'Audi A4.jpeg',\n      'Mercedes-Benz_C-Class': 'Mercedes-Benz C-Class.jpeg',\n      'Ferrari_488': 'Ferrari 488.jpeg',\n      'Volkswagen_Polo': 'Volkswagen Polo.jpeg'\n    };\n    // Create key using make and model from database\n    const key = `${car.make}_${car.model}`;\n    console.log('Looking up image for:', key);\n    // First try exact mapping\n    if (imageMap[key]) {\n      return `assets/cars/${imageMap[key]}`;\n    }\n    // If no exact match, try to construct filename based on model\n    const modelBasedFilename = `${car.model.replace(' ', '-').toLowerCase()}.jpg`;\n    console.log('Trying model-based filename:', modelBasedFilename);\n    // Return the constructed path or fallback to placeholder\n    return `assets/cars/${modelBasedFilename}`;\n  }\n  transformCarData(car) {\n    return {\n      ...car,\n      imageUrl: this.getImageUrl(car)\n    };\n  }\n  getCars() {\n    return this.http.get(this.apiUrl, this.getHttpOptions()).pipe(map(cars => {\n      console.log('Raw cars data:', cars);\n      return cars.map(car => this.transformCarData(car));\n    }));\n  }\n  getCarById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`, this.getHttpOptions()).pipe(map(car => this.transformCarData(car)));\n  }\n  searchCars(searchTerm) {\n    return this.http.get(`${this.apiUrl}/search?term=${searchTerm}`, this.getHttpOptions()).pipe(map(cars => cars.map(car => this.transformCarData(car))));\n  }\n  getCarsByBrand(brand) {\n    return this.http.get(`${this.apiUrl}/brand/${brand}`, this.getHttpOptions()).pipe(map(cars => cars.map(car => this.transformCarData(car))));\n  }\n  static {\n    this.ɵfac = function CarService_Factory(t) {\n      return new (t || CarService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CarService,\n      factory: CarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","map","environment","CarService","constructor","http","apiUrl","getHttpOptions","headers","getImageUrl","car","imageMap","key","make","model","console","log","modelBasedFilename","replace","toLowerCase","transformCarData","imageUrl","getCars","get","pipe","cars","getCarById","id","searchCars","searchTerm","getCarsByBrand","brand","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\car.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\nimport { Car } from '../models/car.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarService {\r\n  private apiUrl = `${environment.apiUrl}/api/cars`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private getHttpOptions(): { headers: HttpHeaders } {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    };\r\n  }\r\n\r\n  private getImageUrl(car: Car): string {\r\n    // Exact mapping based on the database records and asset files\r\n    const imageMap: { [key: string]: string } = {\r\n      'Toyota_Camry': 'Toyota Camry.jpg',\r\n      'Honda_CR-V': 'CR-V.jpg',\r\n      'Tesla_Model 3': 'tesla-model-3.jpg',\r\n      'BMW_X5': 'BMW X5.jpeg',\r\n      'Ford_F-150': 'F-150.jpeg',\r\n      'Ford_Mustang Mach-E': 'ford-mustang-mach-e.jpg',\r\n      'Audi_A4': 'Audi A4.jpeg',\r\n      'Mercedes-Benz_C-Class': 'Mercedes-Benz C-Class.jpeg',\r\n      'Ferrari_488': 'Ferrari 488.jpeg',\r\n      'Volkswagen_Polo': 'Volkswagen Polo.jpeg'\r\n    };\r\n\r\n    // Create key using make and model from database\r\n    const key = `${car.make}_${car.model}`;\r\n    console.log('Looking up image for:', key);\r\n\r\n    // First try exact mapping\r\n    if (imageMap[key]) {\r\n      return `assets/cars/${imageMap[key]}`;\r\n    }\r\n\r\n    // If no exact match, try to construct filename based on model\r\n    const modelBasedFilename = `${car.model.replace(' ', '-').toLowerCase()}.jpg`;\r\n    console.log('Trying model-based filename:', modelBasedFilename);\r\n\r\n    // Return the constructed path or fallback to placeholder\r\n    return `assets/cars/${modelBasedFilename}`;\r\n  }\r\n\r\n  private transformCarData(car: Car): Car {\r\n    return {\r\n      ...car,\r\n      imageUrl: this.getImageUrl(car)\r\n    };\r\n  }\r\n\r\n  getCars(): Observable<Car[]> {\r\n    return this.http.get<Car[]>(this.apiUrl, this.getHttpOptions()).pipe(\r\n      map(cars => {\r\n        console.log('Raw cars data:', cars);\r\n        return cars.map(car => this.transformCarData(car));\r\n      })\r\n    );\r\n  }\r\n\r\n  getCarById(id: number): Observable<Car> {\r\n    return this.http.get<Car>(`${this.apiUrl}/${id}`, this.getHttpOptions()).pipe(\r\n      map(car => this.transformCarData(car))\r\n    );\r\n  }\r\n\r\n  searchCars(searchTerm: string): Observable<Car[]> {\r\n    return this.http.get<Car[]>(`${this.apiUrl}/search?term=${searchTerm}`, this.getHttpOptions()).pipe(\r\n      map(cars => cars.map(car => this.transformCarData(car)))\r\n    );\r\n  }\r\n\r\n  getCarsByBrand(brand: string): Observable<Car[]> {\r\n    return this.http.get<Car[]>(`${this.apiUrl}/brand/${brand}`, this.getHttpOptions()).pipe(\r\n      map(cars => cars.map(car => this.transformCarData(car)))\r\n    );\r\n  }\r\n} \r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}