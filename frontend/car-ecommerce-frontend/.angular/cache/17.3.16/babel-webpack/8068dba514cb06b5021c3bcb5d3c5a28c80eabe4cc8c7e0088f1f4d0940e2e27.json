{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/orders`;\n  }\n  createOrder(orderData) {\n    return this.http.post(this.apiUrl, orderData);\n  }\n  getUserOrders(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}`);\n  }\n  getOrderById(orderId) {\n    return this.http.get(`${this.apiUrl}/${orderId}`);\n  }\n  updateOrderStatus(orderId, status) {\n    return this.http.patch(`${this.apiUrl}/${orderId}/status`, {\n      status\n    });\n  }\n  cancelOrder(orderId) {\n    return this.http.patch(`${this.apiUrl}/${orderId}/cancel`, {});\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","OrderService","constructor","http","apiUrl","createOrder","orderData","post","getUserOrders","userId","get","getOrderById","orderId","updateOrderStatus","status","patch","cancelOrder","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface Order {\r\n  id?: string;\r\n  userId: string;\r\n  items: {\r\n    carId: string;\r\n    make: string;\r\n    model: string;\r\n    year: number;\r\n    price: number;\r\n    quantity: number;\r\n  }[];\r\n  totalAmount: number;\r\n  shippingAddress: {\r\n    fullName: string;\r\n    address: string;\r\n    city: string;\r\n    state: string;\r\n    zipCode: string;\r\n    phone: string;\r\n  };\r\n  orderDate: Date;\r\n  status: 'Placed' | 'Processing' | 'Shipped' | 'Delivered' | 'Cancelled';\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  private apiUrl = `${environment.apiUrl}/orders`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createOrder(orderData: Omit<Order, 'id'>): Observable<Order> {\r\n    return this.http.post<Order>(this.apiUrl, orderData);\r\n  }\r\n\r\n  getUserOrders(userId: string): Observable<Order[]> {\r\n    return this.http.get<Order[]>(`${this.apiUrl}/user/${userId}`);\r\n  }\r\n\r\n  getOrderById(orderId: string): Observable<Order> {\r\n    return this.http.get<Order>(`${this.apiUrl}/${orderId}`);\r\n  }\r\n\r\n  updateOrderStatus(orderId: string, status: Order['status']): Observable<Order> {\r\n    return this.http.patch<Order>(`${this.apiUrl}/${orderId}/status`, { status });\r\n  }\r\n\r\n  cancelOrder(orderId: string): Observable<Order> {\r\n    return this.http.patch<Order>(`${this.apiUrl}/${orderId}/cancel`, {});\r\n  }\r\n} "],"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;AA6B5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,SAAS;EAER;EAEvCC,WAAWA,CAACC,SAA4B;IACtC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAQ,IAAI,CAACH,MAAM,EAAEE,SAAS,CAAC;EACtD;EAEAE,aAAaA,CAACC,MAAc;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAU,GAAG,IAAI,CAACN,MAAM,SAASK,MAAM,EAAE,CAAC;EAChE;EAEAE,YAAYA,CAACC,OAAe;IAC1B,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAQ,GAAG,IAAI,CAACN,MAAM,IAAIQ,OAAO,EAAE,CAAC;EAC1D;EAEAC,iBAAiBA,CAACD,OAAe,EAAEE,MAAuB;IACxD,OAAO,IAAI,CAACX,IAAI,CAACY,KAAK,CAAQ,GAAG,IAAI,CAACX,MAAM,IAAIQ,OAAO,SAAS,EAAE;MAAEE;IAAM,CAAE,CAAC;EAC/E;EAEAE,WAAWA,CAACJ,OAAe;IACzB,OAAO,IAAI,CAACT,IAAI,CAACY,KAAK,CAAQ,GAAG,IAAI,CAACX,MAAM,IAAIQ,OAAO,SAAS,EAAE,EAAE,CAAC;EACvE;;;uBAvBWX,YAAY,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZnB,YAAY;MAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}