{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.CART_STORAGE_KEY = 'car_ecommerce_cart';\n    this.cartItemsSubject = new BehaviorSubject([]);\n    this.cartItems$ = this.cartItemsSubject.asObservable();\n    this.cartCount$ = this.cartItems$.pipe(map(items => items.reduce((total, item) => total + item.quantity, 0)));\n    this.cartTotal$ = this.cartItems$.pipe(map(items => items.reduce((total, item) => total + item.car.price * item.quantity, 0)));\n    this.loadCartFromStorage();\n  }\n  loadCartFromStorage() {\n    try {\n      const savedCart = localStorage.getItem(this.CART_STORAGE_KEY);\n      if (savedCart) {\n        const parsedCart = JSON.parse(savedCart);\n        // Validate the cart data before setting it\n        if (Array.isArray(parsedCart) && parsedCart.every(item => item && item.car && typeof item.car.id === 'number' && typeof item.quantity === 'number')) {\n          this.cartItemsSubject.next(parsedCart);\n        } else {\n          console.warn('Invalid cart data found in storage, clearing cart');\n          this.clearCart();\n        }\n      } else {\n        this.clearCart();\n      }\n    } catch (error) {\n      console.error('Error loading cart from storage:', error);\n      this.clearCart();\n    }\n  }\n  addToCart(car, quantity = 1) {\n    if (!car || !car.id) {\n      console.error('Invalid car object provided to addToCart');\n      return;\n    }\n    const currentItems = this.cartItemsSubject.value;\n    const existingItemIndex = currentItems.findIndex(item => item.car.id === car.id);\n    let updatedItems;\n    if (existingItemIndex !== -1) {\n      updatedItems = [...currentItems];\n      updatedItems[existingItemIndex] = {\n        ...updatedItems[existingItemIndex],\n        quantity: updatedItems[existingItemIndex].quantity + quantity\n      };\n    } else {\n      updatedItems = [...currentItems, {\n        car,\n        quantity\n      }];\n    }\n    this.cartItemsSubject.next(updatedItems);\n    this.saveCartToStorage();\n  }\n  removeFromCart(carId) {\n    const currentItems = this.cartItemsSubject.value;\n    const updatedItems = currentItems.filter(item => item.car.id !== carId);\n    this.cartItemsSubject.next(updatedItems);\n    this.saveCartToStorage();\n  }\n  updateQuantity(carId, newQuantity) {\n    if (newQuantity <= 0) {\n      this.removeFromCart(carId);\n      return;\n    }\n    const currentItems = this.cartItemsSubject.value;\n    const updatedItems = currentItems.map(item => item.car.id === carId ? {\n      ...item,\n      quantity: newQuantity\n    } : item);\n    this.cartItemsSubject.next(updatedItems);\n    this.saveCartToStorage();\n  }\n  isInCart(carId) {\n    return this.cartItemsSubject.value.some(item => item.car.id === carId);\n  }\n  clearCart() {\n    this.cartItemsSubject.next([]);\n    localStorage.removeItem(this.CART_STORAGE_KEY);\n  }\n  saveCartToStorage() {\n    try {\n      const cartItems = this.cartItemsSubject.value;\n      localStorage.setItem(this.CART_STORAGE_KEY, JSON.stringify(cartItems));\n    } catch (error) {\n      console.error('Error saving cart to storage:', error);\n    }\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","CartService","constructor","CART_STORAGE_KEY","cartItemsSubject","cartItems$","asObservable","cartCount$","pipe","items","reduce","total","item","quantity","cartTotal$","car","price","loadCartFromStorage","savedCart","localStorage","getItem","parsedCart","JSON","parse","Array","isArray","every","id","next","console","warn","clearCart","error","addToCart","currentItems","value","existingItemIndex","findIndex","updatedItems","saveCartToStorage","removeFromCart","carId","filter","updateQuantity","newQuantity","isInCart","some","removeItem","cartItems","setItem","stringify","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Car } from '../models/car.model';\r\n\r\nexport interface CartItem {\r\n  car: Car;\r\n  quantity: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private readonly CART_STORAGE_KEY = 'car_ecommerce_cart';\r\n  private cartItemsSubject = new BehaviorSubject<CartItem[]>([]);\r\n  cartItems$ = this.cartItemsSubject.asObservable();\r\n\r\n  cartCount$ = this.cartItems$.pipe(\r\n    map(items => items.reduce((total, item) => total + item.quantity, 0))\r\n  );\r\n\r\n  cartTotal$ = this.cartItems$.pipe(\r\n    map(items => items.reduce((total, item) => total + (item.car.price * item.quantity), 0))\r\n  );\r\n\r\n  constructor() {\r\n    this.loadCartFromStorage();\r\n  }\r\n\r\n  private loadCartFromStorage(): void {\r\n    try {\r\n      const savedCart = localStorage.getItem(this.CART_STORAGE_KEY);\r\n      if (savedCart) {\r\n        const parsedCart = JSON.parse(savedCart);\r\n        // Validate the cart data before setting it\r\n        if (Array.isArray(parsedCart) && parsedCart.every(item => \r\n          item && \r\n          item.car && \r\n          typeof item.car.id === 'number' && \r\n          typeof item.quantity === 'number')) {\r\n          this.cartItemsSubject.next(parsedCart);\r\n        } else {\r\n          console.warn('Invalid cart data found in storage, clearing cart');\r\n          this.clearCart();\r\n        }\r\n      } else {\r\n        this.clearCart();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading cart from storage:', error);\r\n      this.clearCart();\r\n    }\r\n  }\r\n\r\n  addToCart(car: Car, quantity: number = 1): void {\r\n    if (!car || !car.id) {\r\n      console.error('Invalid car object provided to addToCart');\r\n      return;\r\n    }\r\n\r\n    const currentItems = this.cartItemsSubject.value;\r\n    const existingItemIndex = currentItems.findIndex(item => item.car.id === car.id);\r\n\r\n    let updatedItems: CartItem[];\r\n    if (existingItemIndex !== -1) {\r\n      updatedItems = [...currentItems];\r\n      updatedItems[existingItemIndex] = {\r\n        ...updatedItems[existingItemIndex],\r\n        quantity: updatedItems[existingItemIndex].quantity + quantity\r\n      };\r\n    } else {\r\n      updatedItems = [...currentItems, { car, quantity }];\r\n    }\r\n\r\n    this.cartItemsSubject.next(updatedItems);\r\n    this.saveCartToStorage();\r\n  }\r\n\r\n  removeFromCart(carId: number): void {\r\n    const currentItems = this.cartItemsSubject.value;\r\n    const updatedItems = currentItems.filter(item => item.car.id !== carId);\r\n    this.cartItemsSubject.next(updatedItems);\r\n    this.saveCartToStorage();\r\n  }\r\n\r\n  updateQuantity(carId: number, newQuantity: number): void {\r\n    if (newQuantity <= 0) {\r\n      this.removeFromCart(carId);\r\n      return;\r\n    }\r\n\r\n    const currentItems = this.cartItemsSubject.value;\r\n    const updatedItems = currentItems.map(item =>\r\n      item.car.id === carId ? { ...item, quantity: newQuantity } : item\r\n    );\r\n\r\n    this.cartItemsSubject.next(updatedItems);\r\n    this.saveCartToStorage();\r\n  }\r\n\r\n  isInCart(carId: number): boolean {\r\n    return this.cartItemsSubject.value.some(item => item.car.id === carId);\r\n  }\r\n\r\n  clearCart(): void {\r\n    this.cartItemsSubject.next([]);\r\n    localStorage.removeItem(this.CART_STORAGE_KEY);\r\n  }\r\n\r\n  private saveCartToStorage(): void {\r\n    try {\r\n      const cartItems = this.cartItemsSubject.value;\r\n      localStorage.setItem(this.CART_STORAGE_KEY, JSON.stringify(cartItems));\r\n    } catch (error) {\r\n      console.error('Error saving cart to storage:', error);\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}