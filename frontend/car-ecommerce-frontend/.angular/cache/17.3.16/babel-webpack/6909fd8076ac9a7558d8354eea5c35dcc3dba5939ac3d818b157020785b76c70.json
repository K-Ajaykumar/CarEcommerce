{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CarService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5083/api/cars';\n    this.mockCars = [{\n      id: 3,\n      // Tesla Model 3 ID\n      make: 'Tesla',\n      model: 'Model 3',\n      year: 2024,\n      price: 46000,\n      imageUrl: 'assets/cars/tesla-model-3.jpg',\n      description: 'The Tesla Model 3 is an electric four-door sedan.',\n      engineType: 'Electric',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'White',\n      stockQuantity: 10\n    }, {\n      id: 4,\n      // BMW X5 ID\n      make: 'BMW',\n      model: 'X5',\n      year: 2024,\n      price: 66000,\n      imageUrl: 'assets/cars/BMW X5.jpeg',\n      description: 'The BMW X5 is a luxury SUV with powerful performance.',\n      engineType: '3.0L Twin-Turbo',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'Alpine White',\n      stockQuantity: 5\n    }, {\n      id: 7,\n      // Ford Mustang Mach-E ID\n      make: 'Ford',\n      model: 'Mustang Mach-E',\n      year: 2024,\n      price: 53000,\n      imageUrl: 'assets/cars/ford-mustang-mach-e.jpg',\n      description: 'The Ford Mustang Mach-E is an all-electric SUV.',\n      engineType: 'Electric',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'Grabber Green',\n      stockQuantity: 8\n    }, {\n      id: 9,\n      // Mercedes-Benz C-Class ID\n      make: 'Mercedes-Benz',\n      model: 'C-Class',\n      year: 2024,\n      price: 55000,\n      imageUrl: 'assets/cars/Mercedes-Benz C-Class.jpeg',\n      description: 'The Mercedes-Benz C-Class is a luxury sedan.',\n      engineType: '2.0L Turbo',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'Obsidian Black',\n      stockQuantity: 7\n    }, {\n      id: 8,\n      // Audi A4 ID\n      make: 'Audi',\n      model: 'A4',\n      year: 2024,\n      price: 48000,\n      imageUrl: 'assets/cars/Audi A4.jpeg',\n      description: 'The Audi A4 is a premium compact executive car.',\n      engineType: '2.0L Turbo',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'Blue',\n      stockQuantity: 6\n    }, {\n      id: 10,\n      // Ferrari 488 ID\n      make: 'Ferrari',\n      model: '488',\n      year: 2024,\n      price: 330000,\n      imageUrl: 'assets/cars/Ferrari 488.jpeg',\n      description: 'The Ferrari 488 is a high-performance sports car.',\n      engineType: '3.9L V8 Twin-Turbo',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'Rosso Corsa',\n      stockQuantity: 2\n    }, {\n      id: 1,\n      // Toyota Camry ID\n      make: 'Toyota',\n      model: 'Camry',\n      year: 2024,\n      price: 29999.99,\n      imageUrl: 'assets/cars/Toyota Camry.jpeg',\n      description: 'The Toyota Camry is a reliable mid-size sedan.',\n      engineType: '2.5L 4-Cylinder',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'Silver',\n      stockQuantity: 15\n    }, {\n      id: 2,\n      // Honda CR-V ID\n      make: 'Honda',\n      model: 'CR-V',\n      year: 2024,\n      price: 32999.99,\n      imageUrl: 'assets/cars/Honda CR-V.jpg',\n      description: 'The Honda CR-V is a compact SUV known for its versatility.',\n      engineType: '1.5L Turbo',\n      transmission: 'CVT',\n      mileage: 0,\n      color: 'Modern Steel',\n      stockQuantity: 12\n    }, {\n      id: 6,\n      // Ford F-150 ID\n      make: 'Ford',\n      model: 'F-150',\n      year: 2024,\n      price: 52999.99,\n      imageUrl: 'assets/cars/Ford-F-150.jpg',\n      description: 'The Ford F-150 is America\\'s best-selling pickup truck.',\n      engineType: '3.5L EcoBoost',\n      transmission: 'Automatic',\n      mileage: 0,\n      color: 'Oxford White',\n      stockQuantity: 10\n    }];\n  }\n  getCars() {\n    // In production, use this:\n    // return this.http.get<Car[]>(this.apiUrl);\n    // For development with mock data:\n    return of(this.mockCars);\n  }\n  getCarById(id) {\n    // In production, use this:\n    // return this.http.get<Car>(`${this.apiUrl}/${id}`);\n    // For development with mock data:\n    const car = this.mockCars.find(c => c.id === id);\n    return of(car);\n  }\n  searchCars(searchTerm) {\n    const filtered = this.mockCars.filter(car => car.model.toLowerCase().includes(searchTerm.toLowerCase()) || car.make.toLowerCase().includes(searchTerm.toLowerCase()));\n    return of(filtered);\n  }\n  getCarsByMake(make) {\n    const filtered = this.mockCars.filter(car => car.make === make);\n    return of(filtered);\n  }\n  static {\n    this.ɵfac = function CarService_Factory(t) {\n      return new (t || CarService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CarService,\n      factory: CarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","CarService","constructor","http","apiUrl","mockCars","id","make","model","year","price","imageUrl","description","engineType","transmission","mileage","color","stockQuantity","getCars","getCarById","car","find","c","searchCars","searchTerm","filtered","filter","toLowerCase","includes","getCarsByMake","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\car.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Car } from '../models/car.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarService {\r\n  private apiUrl = 'http://localhost:5083/api/cars';\r\n  private mockCars: Car[] = [\r\n    {\r\n      id: 3, // Tesla Model 3 ID\r\n      make: 'Tesla',\r\n      model: 'Model 3',\r\n      year: 2024,\r\n      price: 46000,\r\n      imageUrl: 'assets/cars/tesla-model-3.jpg',\r\n      description: 'The Tesla Model 3 is an electric four-door sedan.',\r\n      engineType: 'Electric',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'White',\r\n      stockQuantity: 10\r\n    },\r\n    {\r\n      id: 4, // BMW X5 ID\r\n      make: 'BMW',\r\n      model: 'X5',\r\n      year: 2024,\r\n      price: 66000,\r\n      imageUrl: 'assets/cars/BMW X5.jpeg',\r\n      description: 'The BMW X5 is a luxury SUV with powerful performance.',\r\n      engineType: '3.0L Twin-Turbo',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'Alpine White',\r\n      stockQuantity: 5\r\n    },\r\n    {\r\n      id: 7, // Ford Mustang Mach-E ID\r\n      make: 'Ford',\r\n      model: 'Mustang Mach-E',\r\n      year: 2024,\r\n      price: 53000,\r\n      imageUrl: 'assets/cars/ford-mustang-mach-e.jpg',\r\n      description: 'The Ford Mustang Mach-E is an all-electric SUV.',\r\n      engineType: 'Electric',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'Grabber Green',\r\n      stockQuantity: 8\r\n    },\r\n    {\r\n      id: 9, // Mercedes-Benz C-Class ID\r\n      make: 'Mercedes-Benz',\r\n      model: 'C-Class',\r\n      year: 2024,\r\n      price: 55000,\r\n      imageUrl: 'assets/cars/Mercedes-Benz C-Class.jpeg',\r\n      description: 'The Mercedes-Benz C-Class is a luxury sedan.',\r\n      engineType: '2.0L Turbo',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'Obsidian Black',\r\n      stockQuantity: 7\r\n    },\r\n    {\r\n      id: 8, // Audi A4 ID\r\n      make: 'Audi',\r\n      model: 'A4',\r\n      year: 2024,\r\n      price: 48000,\r\n      imageUrl: 'assets/cars/Audi A4.jpeg',\r\n      description: 'The Audi A4 is a premium compact executive car.',\r\n      engineType: '2.0L Turbo',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'Blue',\r\n      stockQuantity: 6\r\n    },\r\n    {\r\n      id: 10, // Ferrari 488 ID\r\n      make: 'Ferrari',\r\n      model: '488',\r\n      year: 2024,\r\n      price: 330000,\r\n      imageUrl: 'assets/cars/Ferrari 488.jpeg',\r\n      description: 'The Ferrari 488 is a high-performance sports car.',\r\n      engineType: '3.9L V8 Twin-Turbo',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'Rosso Corsa',\r\n      stockQuantity: 2\r\n    },\r\n    {\r\n      id: 1, // Toyota Camry ID\r\n      make: 'Toyota',\r\n      model: 'Camry',\r\n      year: 2024,\r\n      price: 29999.99,\r\n      imageUrl: 'assets/cars/Toyota Camry.jpeg',\r\n      description: 'The Toyota Camry is a reliable mid-size sedan.',\r\n      engineType: '2.5L 4-Cylinder',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'Silver',\r\n      stockQuantity: 15\r\n    },\r\n    {\r\n      id: 2, // Honda CR-V ID\r\n      make: 'Honda',\r\n      model: 'CR-V',\r\n      year: 2024,\r\n      price: 32999.99,\r\n      imageUrl: 'assets/cars/Honda CR-V.jpg',\r\n      description: 'The Honda CR-V is a compact SUV known for its versatility.',\r\n      engineType: '1.5L Turbo',\r\n      transmission: 'CVT',\r\n      mileage: 0,\r\n      color: 'Modern Steel',\r\n      stockQuantity: 12\r\n    },\r\n    {\r\n      id: 6, // Ford F-150 ID\r\n      make: 'Ford',\r\n      model: 'F-150',\r\n      year: 2024,\r\n      price: 52999.99,\r\n      imageUrl: 'assets/cars/Ford-F-150.jpg',\r\n      description: 'The Ford F-150 is America\\'s best-selling pickup truck.',\r\n      engineType: '3.5L EcoBoost',\r\n      transmission: 'Automatic',\r\n      mileage: 0,\r\n      color: 'Oxford White',\r\n      stockQuantity: 10\r\n    }\r\n  ];\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCars(): Observable<Car[]> {\r\n    // In production, use this:\r\n    // return this.http.get<Car[]>(this.apiUrl);\r\n    \r\n    // For development with mock data:\r\n    return of(this.mockCars);\r\n  }\r\n\r\n  getCarById(id: number): Observable<Car> {\r\n    // In production, use this:\r\n    // return this.http.get<Car>(`${this.apiUrl}/${id}`);\r\n    \r\n    // For development with mock data:\r\n    const car = this.mockCars.find(c => c.id === id);\r\n    return of(car as Car);\r\n  }\r\n\r\n  searchCars(searchTerm: string): Observable<Car[]> {\r\n    const filtered = this.mockCars.filter(car => \r\n      car.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      car.make.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    return of(filtered);\r\n  }\r\n\r\n  getCarsByMake(make: string): Observable<Car[]> {\r\n    const filtered = this.mockCars.filter(car => car.make === make);\r\n    return of(filtered);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}