{"ast":null,"code":"export { coerceBooleanProperty } from './boolean-property-_aCfQwp8.mjs';\nexport { _isNumberValue, coerceElement, coerceNumberProperty } from './element-CpqV8p-X.mjs';\nexport { coerceArray } from './array-Hg8isvLj.mjs';\nexport { coerceCssPixelValue } from './css-pixel-value-C1yoKJ7R.mjs';\nimport '@angular/core';\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n  const result = [];\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n  return result;\n}\nexport { coerceStringArray };","map":{"version":3,"names":["coerceBooleanProperty","_isNumberValue","coerceElement","coerceNumberProperty","coerceArray","coerceCssPixelValue","coerceStringArray","value","separator","result","sourceValues","Array","isArray","split","sourceValue","trimmedString","trim","push"],"sources":["C:/angular project/car/frontend/car-ecommerce-frontend/node_modules/@angular/cdk/fesm2022/coercion.mjs"],"sourcesContent":["export { coerceBooleanProperty } from './boolean-property-_aCfQwp8.mjs';\nexport { _isNumberValue, coerceElement, coerceNumberProperty } from './element-CpqV8p-X.mjs';\nexport { coerceArray } from './array-Hg8isvLj.mjs';\nexport { coerceCssPixelValue } from './css-pixel-value-C1yoKJ7R.mjs';\nimport '@angular/core';\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\nexport { coerceStringArray };\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,iCAAiC;AACvE,SAASC,cAAc,EAAEC,aAAa,EAAEC,oBAAoB,QAAQ,wBAAwB;AAC5F,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,OAAO,eAAe;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,KAAK,EAAEC,SAAS,GAAG,KAAK,EAAE;EACjD,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIF,KAAK,IAAI,IAAI,EAAE;IACf,MAAMG,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,GAAGA,KAAK,GAAG,GAAGA,KAAK,EAAE,CAACM,KAAK,CAACL,SAAS,CAAC;IAC/E,KAAK,MAAMM,WAAW,IAAIJ,YAAY,EAAE;MACpC,MAAMK,aAAa,GAAG,GAAGD,WAAW,EAAE,CAACE,IAAI,CAAC,CAAC;MAC7C,IAAID,aAAa,EAAE;QACfN,MAAM,CAACQ,IAAI,CAACF,aAAa,CAAC;MAC9B;IACJ;EACJ;EACA,OAAON,MAAM;AACjB;AAEA,SAASH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}