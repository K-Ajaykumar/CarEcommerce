{"ast":null,"code":"export { Platform } from './platform-Do3uqmxu.mjs';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nexport { normalizePassiveListenerOptions, supportsPassiveEventListeners } from './passive-listeners-ZmZRMx8D.mjs';\nexport { RtlScrollAxisType, getRtlScrollAxisType, supportsScrollBehavior } from './scrolling-BXVcIfjZ.mjs';\nexport { _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _supportsShadowDom } from './shadow-dom-DFvX9W95.mjs';\nexport { _isTestEnvironment } from './test-environment-BgaaXvCA.mjs';\nexport { _bindEventWithOptions } from './backwards-compatibility-DYuVCOXM.mjs';\nimport '@angular/common';\nclass PlatformModule {\n  static ɵfac = function PlatformModule_Factory(t) {\n    return new (t || PlatformModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PlatformModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PlatformModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n// first changing it to something else:\n// The specified value \"\" does not conform to the required format.\n// The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\nexport { PlatformModule, getSupportedInputTypes };","map":{"version":3,"names":["Platform","i0","NgModule","normalizePassiveListenerOptions","supportsPassiveEventListeners","RtlScrollAxisType","getRtlScrollAxisType","supportsScrollBehavior","_getEventTarget","_getFocusedElementPierceShadowDom","_getShadowRoot","_supportsShadowDom","_isTestEnvironment","_bindEventWithOptions","PlatformModule","ɵfac","PlatformModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","args","supportedInputTypes","candidateInputTypes","getSupportedInputTypes","document","Set","featureTestInput","createElement","filter","value","setAttribute"],"sources":["C:/angular project/car/frontend/car-ecommerce-frontend/node_modules/@angular/cdk/fesm2022/platform.mjs"],"sourcesContent":["export { Platform } from './platform-Do3uqmxu.mjs';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nexport { normalizePassiveListenerOptions, supportsPassiveEventListeners } from './passive-listeners-ZmZRMx8D.mjs';\nexport { RtlScrollAxisType, getRtlScrollAxisType, supportsScrollBehavior } from './scrolling-BXVcIfjZ.mjs';\nexport { _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _supportsShadowDom } from './shadow-dom-DFvX9W95.mjs';\nexport { _isTestEnvironment } from './test-environment-BgaaXvCA.mjs';\nexport { _bindEventWithOptions } from './backwards-compatibility-DYuVCOXM.mjs';\nimport '@angular/common';\n\nclass PlatformModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\nexport { PlatformModule, getSupportedInputTypes };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,yBAAyB;AAClD,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,+BAA+B,EAAEC,6BAA6B,QAAQ,kCAAkC;AACjH,SAASC,iBAAiB,EAAEC,oBAAoB,EAAEC,sBAAsB,QAAQ,0BAA0B;AAC1G,SAASC,eAAe,EAAEC,iCAAiC,EAAEC,cAAc,EAAEC,kBAAkB,QAAQ,2BAA2B;AAClI,SAASC,kBAAkB,QAAQ,iCAAiC;AACpE,SAASC,qBAAqB,QAAQ,wCAAwC;AAC9E,OAAO,iBAAiB;AAExB,MAAMC,cAAc,CAAC;EACjB,OAAOC,IAAI,YAAAC,uBAAAC,CAAA;IAAA,YAAAA,CAAA,IAAwFH,cAAc;EAAA;EACjH,OAAOI,IAAI,kBAD8EjB,EAAE,CAAAkB,gBAAA;IAAAC,IAAA,EACSN;EAAc;EAClH,OAAOO,IAAI,kBAF8EpB,EAAE,CAAAqB,gBAAA;AAG/F;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAJ6FtB,EAAE,CAAAuB,iBAAA,CAIJV,cAAc,EAAc,CAAC;IAC5GM,IAAI,EAAElB,QAAQ;IACduB,IAAI,EAAE,CAAC,CAAC,CAAC;EACb,CAAC,CAAC;AAAA;;AAEV;AACA,IAAIC,mBAAmB;AACvB;AACA,MAAMC,mBAAmB,GAAG;AACxB;AACA;AACA;AACA;AACA,OAAO,EACP,QAAQ,EACR,UAAU,EACV,MAAM,EACN,gBAAgB,EAChB,OAAO,EACP,MAAM,EACN,QAAQ,EACR,OAAO,EACP,OAAO,EACP,QAAQ,EACR,UAAU,EACV,OAAO,EACP,OAAO,EACP,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,MAAM,EACN,MAAM,EACN,KAAK,EACL,MAAM,CACT;AACD;AACA,SAASC,sBAAsBA,CAAA,EAAG;EAC9B;EACA,IAAIF,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB;EAC9B;EACA;EACA;EACA;EACA,IAAI,OAAOG,QAAQ,KAAK,QAAQ,IAAI,CAACA,QAAQ,EAAE;IAC3CH,mBAAmB,GAAG,IAAII,GAAG,CAACH,mBAAmB,CAAC;IAClD,OAAOD,mBAAmB;EAC9B;EACA,IAAIK,gBAAgB,GAAGF,QAAQ,CAACG,aAAa,CAAC,OAAO,CAAC;EACtDN,mBAAmB,GAAG,IAAII,GAAG,CAACH,mBAAmB,CAACM,MAAM,CAACC,KAAK,IAAI;IAC9DH,gBAAgB,CAACI,YAAY,CAAC,MAAM,EAAED,KAAK,CAAC;IAC5C,OAAOH,gBAAgB,CAACX,IAAI,KAAKc,KAAK;EAC1C,CAAC,CAAC,CAAC;EACH,OAAOR,mBAAmB;AAC9B;AAEA,SAASZ,cAAc,EAAEc,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}