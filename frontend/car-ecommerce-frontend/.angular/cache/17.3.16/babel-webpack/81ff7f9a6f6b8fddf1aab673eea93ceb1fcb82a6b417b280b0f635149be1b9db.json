{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5083/api/auth';\n    this.userSubject = new BehaviorSubject(null);\n    this.user$ = this.userSubject.asObservable();\n    this.checkAuthState();\n  }\n  checkAuthState() {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        if (user && user.token) {\n          this.userSubject.next(user);\n        } else {\n          this.logout(); // Clear invalid state\n        }\n      } catch {\n        this.logout(); // Clear invalid state\n      }\n    }\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      if (response && response.token) {\n        localStorage.setItem('user', JSON.stringify(response));\n        this.userSubject.next(response);\n      }\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n      if (response && response.token) {\n        localStorage.setItem('user', JSON.stringify(response));\n        this.userSubject.next(response);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('user');\n    this.userSubject.next(null);\n  }\n  isLoggedIn() {\n    const currentUser = this.userSubject.value;\n    return !!(currentUser && currentUser.token);\n  }\n  getToken() {\n    const currentUser = this.userSubject.value;\n    return currentUser ? currentUser.token : null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","userSubject","user$","asObservable","checkAuthState","storedUser","localStorage","getItem","user","JSON","parse","token","next","logout","login","credentials","post","pipe","response","setItem","stringify","register","userData","removeItem","isLoggedIn","currentUser","value","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, tap } from 'rxjs';\r\n\r\nexport interface LoginRequest {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  address?: string;\r\n  phoneNumber?: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  token: string;\r\n  userId: number;\r\n  email: string;\r\n  username: string;\r\n  name?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:5083/api/auth';\r\n  private userSubject = new BehaviorSubject<AuthResponse | null>(null);\r\n  user$ = this.userSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.checkAuthState();\r\n  }\r\n\r\n  private checkAuthState(): void {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const user = JSON.parse(storedUser);\r\n        if (user && user.token) {\r\n          this.userSubject.next(user);\r\n        } else {\r\n          this.logout(); // Clear invalid state\r\n        }\r\n      } catch {\r\n        this.logout(); // Clear invalid state\r\n      }\r\n    }\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          if (response && response.token) {\r\n            localStorage.setItem('user', JSON.stringify(response));\r\n            this.userSubject.next(response);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  register(userData: RegisterRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData)\r\n      .pipe(\r\n        tap(response => {\r\n          if (response && response.token) {\r\n            localStorage.setItem('user', JSON.stringify(response));\r\n            this.userSubject.next(response);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('user');\r\n    this.userSubject.next(null);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    const currentUser = this.userSubject.value;\r\n    return !!(currentUser && currentUser.token);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    const currentUser = this.userSubject.value;\r\n    return currentUser ? currentUser.token : null;\r\n  }\r\n} "],"mappings":"AAEA,SAAqBA,eAAe,EAAEC,GAAG,QAAQ,MAAM;;;AA4BvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,WAAW,GAAG,IAAIN,eAAe,CAAsB,IAAI,CAAC;IACpE,KAAAO,KAAK,GAAG,IAAI,CAACD,WAAW,CAACE,YAAY,EAAE;IAGrC,IAAI,CAACC,cAAc,EAAE;EACvB;EAEQA,cAAcA,CAAA;IACpB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,IAAI;QACF,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;QACnC,IAAIG,IAAI,IAAIA,IAAI,CAACG,KAAK,EAAE;UACtB,IAAI,CAACV,WAAW,CAACW,IAAI,CAACJ,IAAI,CAAC;QAC7B,CAAC,MAAM;UACL,IAAI,CAACK,MAAM,EAAE,CAAC,CAAC;QACjB;MACF,CAAC,CAAC,MAAM;QACN,IAAI,CAACA,MAAM,EAAE,CAAC,CAAC;MACjB;IACF;EACF;EAEAC,KAAKA,CAACC,WAAyB;IAC7B,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAe,GAAG,IAAI,CAAChB,MAAM,QAAQ,EAAEe,WAAW,CAAC,CACrEE,IAAI,CACHrB,GAAG,CAACsB,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACP,KAAK,EAAE;QAC9BL,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,QAAQ,CAAC,CAAC;QACtD,IAAI,CAACjB,WAAW,CAACW,IAAI,CAACM,QAAQ,CAAC;MACjC;IACF,CAAC,CAAC,CACH;EACL;EAEAG,QAAQA,CAACC,QAAyB;IAChC,OAAO,IAAI,CAACvB,IAAI,CAACiB,IAAI,CAAe,GAAG,IAAI,CAAChB,MAAM,WAAW,EAAEsB,QAAQ,CAAC,CACrEL,IAAI,CACHrB,GAAG,CAACsB,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACP,KAAK,EAAE;QAC9BL,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,QAAQ,CAAC,CAAC;QACtD,IAAI,CAACjB,WAAW,CAACW,IAAI,CAACM,QAAQ,CAAC;MACjC;IACF,CAAC,CAAC,CACH;EACL;EAEAL,MAAMA,CAAA;IACJP,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACtB,WAAW,CAACW,IAAI,CAAC,IAAI,CAAC;EAC7B;EAEAY,UAAUA,CAAA;IACR,MAAMC,WAAW,GAAG,IAAI,CAACxB,WAAW,CAACyB,KAAK;IAC1C,OAAO,CAAC,EAAED,WAAW,IAAIA,WAAW,CAACd,KAAK,CAAC;EAC7C;EAEAgB,QAAQA,CAAA;IACN,MAAMF,WAAW,GAAG,IAAI,CAACxB,WAAW,CAACyB,KAAK;IAC1C,OAAOD,WAAW,GAAGA,WAAW,CAACd,KAAK,GAAG,IAAI;EAC/C;;;uBA9DWd,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}