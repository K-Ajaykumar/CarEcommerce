{"ast":null,"code":"import { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CarService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5083/api/cars';\n  }\n  getCars() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      console.error('Error fetching cars:', error);\n      return of([]);\n    }));\n  }\n  getCarById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error(`Error fetching car with id ${id}:`, error);\n      return of(undefined);\n    }));\n  }\n  searchCars(searchTerm) {\n    return this.http.get(`${this.apiUrl}/search?term=${encodeURIComponent(searchTerm)}`).pipe(catchError(error => {\n      console.error('Error searching cars:', error);\n      return of([]);\n    }));\n  }\n  getCarsByBrand(brand) {\n    return this.http.get(`${this.apiUrl}/brand/${encodeURIComponent(brand)}`).pipe(catchError(error => {\n      console.error(`Error fetching cars for brand ${brand}:`, error);\n      return of([]);\n    }));\n  }\n  getAllBrands() {\n    return this.getCars().pipe(map(cars => [...new Set(cars.map(car => car.brand))].sort()));\n  }\n  static {\n    this.ɵfac = function CarService_Factory(t) {\n      return new (t || CarService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CarService,\n      factory: CarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","map","of","CarService","constructor","http","apiUrl","getCars","get","pipe","error","console","getCarById","id","undefined","searchCars","searchTerm","encodeURIComponent","getCarsByBrand","brand","getAllBrands","cars","Set","car","sort","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\car.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, catchError, map, of } from 'rxjs';\r\nimport { Car } from '../models/car.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarService {\r\n  private apiUrl = 'http://localhost:5083/api/cars';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCars(): Observable<Car[]> {\r\n    return this.http.get<Car[]>(this.apiUrl).pipe(\r\n      catchError(error => {\r\n        console.error('Error fetching cars:', error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getCarById(id: number): Observable<Car | undefined> {\r\n    return this.http.get<Car>(`${this.apiUrl}/${id}`).pipe(\r\n      catchError(error => {\r\n        console.error(`Error fetching car with id ${id}:`, error);\r\n        return of(undefined);\r\n      })\r\n    );\r\n  }\r\n\r\n  searchCars(searchTerm: string): Observable<Car[]> {\r\n    return this.http.get<Car[]>(`${this.apiUrl}/search?term=${encodeURIComponent(searchTerm)}`).pipe(\r\n      catchError(error => {\r\n        console.error('Error searching cars:', error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getCarsByBrand(brand: string): Observable<Car[]> {\r\n    return this.http.get<Car[]>(`${this.apiUrl}/brand/${encodeURIComponent(brand)}`).pipe(\r\n      catchError(error => {\r\n        console.error(`Error fetching cars for brand ${brand}:`, error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getAllBrands(): Observable<string[]> {\r\n    return this.getCars().pipe(\r\n      map(cars => [...new Set(cars.map(car => car.brand))].sort())\r\n    );\r\n  }\r\n} "],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;AAMtD,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gCAAgC;EAET;EAExCC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAC3CT,UAAU,CAACU,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOR,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACH;EAEAU,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,IAAIO,EAAE,EAAE,CAAC,CAACJ,IAAI,CACpDT,UAAU,CAACU,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8BAA8BG,EAAE,GAAG,EAAEH,KAAK,CAAC;MACzD,OAAOR,EAAE,CAACY,SAAS,CAAC;IACtB,CAAC,CAAC,CACH;EACH;EAEAC,UAAUA,CAACC,UAAkB;IAC3B,OAAO,IAAI,CAACX,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,gBAAgBW,kBAAkB,CAACD,UAAU,CAAC,EAAE,CAAC,CAACP,IAAI,CAC9FT,UAAU,CAACU,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAOR,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACH;EAEAgB,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,UAAUW,kBAAkB,CAACE,KAAK,CAAC,EAAE,CAAC,CAACV,IAAI,CACnFT,UAAU,CAACU,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,iCAAiCS,KAAK,GAAG,EAAET,KAAK,CAAC;MAC/D,OAAOR,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACH;EAEAkB,YAAYA,CAAA;IACV,OAAO,IAAI,CAACb,OAAO,EAAE,CAACE,IAAI,CACxBR,GAAG,CAACoB,IAAI,IAAI,CAAC,GAAG,IAAIC,GAAG,CAACD,IAAI,CAACpB,GAAG,CAACsB,GAAG,IAAIA,GAAG,CAACJ,KAAK,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC,CAC7D;EACH;;;uBA7CWrB,UAAU,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVzB,UAAU;MAAA0B,OAAA,EAAV1B,UAAU,CAAA2B,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}