{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:5083/api/auth';\n    this.isAuthenticatedSubject = new BehaviorSubject(this.hasValidToken());\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    // Check token validity on service initialization\n    this.isAuthenticatedSubject.next(this.hasValidToken());\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response && response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        this.isAuthenticatedSubject.next(true);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.isAuthenticatedSubject.next(false);\n    this.router.navigate(['/login']);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  hasValidToken() {\n    const token = this.getToken();\n    if (!token) return false;\n    // Add additional token validation if needed\n    // For example, check if token is expired using JWT decode\n    return true;\n  }\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  isLoggedIn() {\n    return this.hasValidToken();\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n      localStorage.setItem('user', JSON.stringify(response));\n      this.isAuthenticatedSubject.next(true);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","router","apiUrl","isAuthenticatedSubject","hasValidToken","isAuthenticated$","asObservable","next","login","username","password","post","pipe","response","token","localStorage","setItem","JSON","stringify","user","logout","removeItem","navigate","getToken","getItem","getCurrentUser","userStr","parse","isLoggedIn","register","userData","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n  user: {\r\n    id: number;\r\n    username: string;\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n  };\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  address?: string;\r\n  phoneNumber?: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  token: string;\r\n  userId: number;\r\n  email: string;\r\n  username: string;\r\n  name?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:5083/api/auth';\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(this.hasValidToken());\r\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    // Check token validity on service initialization\r\n    this.isAuthenticatedSubject.next(this.hasValidToken());\r\n  }\r\n\r\n  login(username: string, password: string): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { username, password }).pipe(\r\n      tap(response => {\r\n        if (response && response.token) {\r\n          localStorage.setItem('token', response.token);\r\n          localStorage.setItem('user', JSON.stringify(response.user));\r\n          this.isAuthenticatedSubject.next(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.isAuthenticatedSubject.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  hasValidToken(): boolean {\r\n    const token = this.getToken();\r\n    if (!token) return false;\r\n\r\n    // Add additional token validation if needed\r\n    // For example, check if token is expired using JWT decode\r\n    return true;\r\n  }\r\n\r\n  getCurrentUser(): any {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.hasValidToken();\r\n  }\r\n\r\n  register(userData: RegisterRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData)\r\n      .pipe(\r\n        tap(response => {\r\n          localStorage.setItem('user', JSON.stringify(response));\r\n          this.isAuthenticatedSubject.next(true);\r\n        })\r\n      );\r\n  }\r\n} \r\n "],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;;AAmCvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAJ5C,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,sBAAsB,GAAG,IAAIP,eAAe,CAAU,IAAI,CAACQ,aAAa,EAAE,CAAC;IACnF,KAAAC,gBAAgB,GAAG,IAAI,CAACF,sBAAsB,CAACG,YAAY,EAAE;IAG3D;IACA,IAAI,CAACH,sBAAsB,CAACI,IAAI,CAAC,IAAI,CAACH,aAAa,EAAE,CAAC;EACxD;EAEAI,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAgB,GAAG,IAAI,CAACT,MAAM,QAAQ,EAAE;MAAEO,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACvFf,GAAG,CAACgB,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7CC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACM,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAChB,sBAAsB,CAACI,IAAI,CAAC,IAAI,CAAC;MACxC;IACF,CAAC,CAAC,CACH;EACH;EAEAa,MAAMA,CAAA;IACJL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAClB,sBAAsB,CAACI,IAAI,CAAC,KAAK,CAAC;IACvC,IAAI,CAACN,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,QAAQA,CAAA;IACN,OAAOR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;EACtC;EAEApB,aAAaA,CAAA;IACX,MAAMU,KAAK,GAAG,IAAI,CAACS,QAAQ,EAAE;IAC7B,IAAI,CAACT,KAAK,EAAE,OAAO,KAAK;IAExB;IACA;IACA,OAAO,IAAI;EACb;EAEAW,cAAcA,CAAA;IACZ,MAAMC,OAAO,GAAGX,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;IAC5C,OAAOE,OAAO,GAAGT,IAAI,CAACU,KAAK,CAACD,OAAO,CAAC,GAAG,IAAI;EAC7C;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACxB,aAAa,EAAE;EAC7B;EAEAyB,QAAQA,CAACC,QAAyB;IAChC,OAAO,IAAI,CAAC9B,IAAI,CAACW,IAAI,CAAe,GAAG,IAAI,CAACT,MAAM,WAAW,EAAE4B,QAAQ,CAAC,CACrElB,IAAI,CACHf,GAAG,CAACgB,QAAQ,IAAG;MACbE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC,CAAC;MACtD,IAAI,CAACV,sBAAsB,CAACI,IAAI,CAAC,IAAI,CAAC;IACxC,CAAC,CAAC,CACH;EACL;;;uBA3DWT,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXtC,WAAW;MAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}