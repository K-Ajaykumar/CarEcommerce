{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CarService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/api/cars`;\n  }\n  getHttpOptions() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getImageUrl(car) {\n    // Using exact filenames from assets/cars folder\n    const imageMap = {\n      'Toyota Camry': 'Camry.jpeg',\n      'Honda CR-V': 'CR-V.jpg',\n      'Tesla Model 3': 'model-3.jpg',\n      'BMW X5': 'X5.jpeg',\n      'Ford F-150': 'F-150.jpeg',\n      'Ford Mustang Mach-E': 'ford-mustang-mach-e.jpg',\n      'Audi A4': 'A4.jpeg',\n      'Mercedes-Benz C-Class': 'C-Class.jpeg',\n      'Ferrari 488': '488.jpeg'\n    };\n    const key = `${car.make} ${car.model}`;\n    // First try exact filename from assets\n    const exactFilename = `${car.model}.jpeg`;\n    // Check if the file exists in assets/cars with the exact name\n    if (Object.values(imageMap).includes(exactFilename)) {\n      return `assets/cars/${exactFilename}`;\n    }\n    // Fallback to the mapping\n    const mappedFilename = imageMap[key];\n    if (mappedFilename) {\n      return `assets/cars/${mappedFilename}`;\n    }\n    // Final fallback to placeholder\n    console.warn(`No image found for ${key}, using placeholder`);\n    return 'assets/cars/placeholder.jpg';\n  }\n  transformCarData(car) {\n    return {\n      ...car,\n      imageUrl: this.getImageUrl(car)\n    };\n  }\n  getCars() {\n    return this.http.get(this.apiUrl, this.getHttpOptions()).pipe(map(cars => cars.map(car => this.transformCarData(car))));\n  }\n  getCarById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`, this.getHttpOptions()).pipe(map(car => this.transformCarData(car)));\n  }\n  searchCars(searchTerm) {\n    return this.http.get(`${this.apiUrl}/search?term=${searchTerm}`, this.getHttpOptions()).pipe(map(cars => cars.map(car => this.transformCarData(car))));\n  }\n  getCarsByBrand(brand) {\n    return this.http.get(`${this.apiUrl}/brand/${brand}`, this.getHttpOptions()).pipe(map(cars => cars.map(car => this.transformCarData(car))));\n  }\n  static {\n    this.ɵfac = function CarService_Factory(t) {\n      return new (t || CarService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CarService,\n      factory: CarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","map","environment","CarService","constructor","http","apiUrl","getHttpOptions","headers","getImageUrl","car","imageMap","key","make","model","exactFilename","Object","values","includes","mappedFilename","console","warn","transformCarData","imageUrl","getCars","get","pipe","cars","getCarById","id","searchCars","searchTerm","getCarsByBrand","brand","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular project\\car\\frontend\\car-ecommerce-frontend\\src\\app\\services\\car.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\nimport { Car } from '../models/car.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarService {\r\n  private apiUrl = `${environment.apiUrl}/api/cars`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private getHttpOptions(): { headers: HttpHeaders } {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    };\r\n  }\r\n\r\n  private getImageUrl(car: Car): string {\r\n    // Using exact filenames from assets/cars folder\r\n    const imageMap: { [key: string]: string } = {\r\n      'Toyota Camry': 'Camry.jpeg',\r\n      'Honda CR-V': 'CR-V.jpg',\r\n      'Tesla Model 3': 'model-3.jpg',\r\n      'BMW X5': 'X5.jpeg',\r\n      'Ford F-150': 'F-150.jpeg',\r\n      'Ford Mustang Mach-E': 'ford-mustang-mach-e.jpg',\r\n      'Audi A4': 'A4.jpeg',\r\n      'Mercedes-Benz C-Class': 'C-Class.jpeg',\r\n      'Ferrari 488': '488.jpeg'\r\n    };\r\n\r\n    const key = `${car.make} ${car.model}`;\r\n    // First try exact filename from assets\r\n    const exactFilename = `${car.model}.jpeg`;\r\n    \r\n    // Check if the file exists in assets/cars with the exact name\r\n    if (Object.values(imageMap).includes(exactFilename)) {\r\n      return `assets/cars/${exactFilename}`;\r\n    }\r\n    \r\n    // Fallback to the mapping\r\n    const mappedFilename = imageMap[key];\r\n    if (mappedFilename) {\r\n      return `assets/cars/${mappedFilename}`;\r\n    }\r\n    \r\n    // Final fallback to placeholder\r\n    console.warn(`No image found for ${key}, using placeholder`);\r\n    return 'assets/cars/placeholder.jpg';\r\n  }\r\n\r\n  private transformCarData(car: Car): Car {\r\n    return {\r\n      ...car,\r\n      imageUrl: this.getImageUrl(car)\r\n    };\r\n  }\r\n\r\n  getCars(): Observable<Car[]> {\r\n    return this.http.get<Car[]>(this.apiUrl, this.getHttpOptions()).pipe(\r\n      map(cars => cars.map(car => this.transformCarData(car)))\r\n    );\r\n  }\r\n\r\n  getCarById(id: number): Observable<Car> {\r\n    return this.http.get<Car>(`${this.apiUrl}/${id}`, this.getHttpOptions()).pipe(\r\n      map(car => this.transformCarData(car))\r\n    );\r\n  }\r\n\r\n  searchCars(searchTerm: string): Observable<Car[]> {\r\n    return this.http.get<Car[]>(`${this.apiUrl}/search?term=${searchTerm}`, this.getHttpOptions()).pipe(\r\n      map(cars => cars.map(car => this.transformCarData(car)))\r\n    );\r\n  }\r\n\r\n  getCarsByBrand(brand: string): Observable<Car[]> {\r\n    return this.http.get<Car[]>(`${this.apiUrl}/brand/${brand}`, this.getHttpOptions()).pipe(\r\n      map(cars => cars.map(car => this.transformCarData(car)))\r\n    );\r\n  }\r\n} \r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}